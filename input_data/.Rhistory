library(readxl)
library(IHW)
library(pheatmap)
library(EnhancedVolcano)
library(DESeq2)
library(Glimma)
library(tidyr)
library(DOSE)
library(clusterProfiler)
library(enrichplot)
library(R.utils)
R.utils::setOption("clusterProfiler.download.method","auto")
#set the desired organism here
organism = "org.Hs.eg.db"
library(organism, character.only = TRUE)
setwd("C:/Users/koenv/OneDrive/Documenten/Universiteit/Bio-informatica Jaar 3/Thesis_project/input_data")
#Loading in files
sample_sheet <- read_excel("sample_sheet.xlsx")
CRC_dataset <- read_excel("CRC_Stage-III_Salzburg-Cohort_Coded_Relapse-Data_fChristina.xlsx")
#Merging two tables together, based on sample_ID/samplegetwd()\
full_data <- merge (sample_sheet, CRC_dataset, by.x = "sample", by.y = "Sample ID")
#Select the columns that we want to keep
full_data =  subset(full_data,
select = c("sample", "Sex\n[1=male; 2=female]", "Relapse within 3 years\n[0=No; 1=Yes]","Tumor Cell Content\n[minimum]","Tumor Cell Content\n[maximum]"))
#Changing the column names for easier viewing
colnames(full_data) <- c('sample','gender', 'response', 'min_tumor_cell_content','max_tumor_cell_content')
#Remove spaces from sample column of the df table.
full_data$sample <- gsub('\\s+', '', full_data$sample)
#Creating a filter that shows us a minimum tumor cell content of either 50% or 25%.
vars <- c("min_tumor_cell_content")
cond <- c(50, 25)
#Using the filter, can select the condition (50%,25%) for which we want to check.
annotation_table <- full_data %>% filter(.data[[vars[[1]]]] >= cond[[1]])
#write.table(annotation_table, file="Annotation_table", quote = F)
full_data = subset(full_data, select = c('sample', 'gender', 'response'))
#loading in gene count data set
counts_table <- read_table("salmon.merged.gene_counts.tsv")
#optimized viewing (removing _ from the gene count data set)
colnames(counts_table) <- gsub("_", "", colnames(counts_table))
#removing samples from gene_count_dataset that don't have the 50% tumor cell count
counts_table <- subset(counts_table, select = c("geneid","genename", annotation_table$sample))
#creating a sum of all the gene counts
counts_table_sum <- counts_table[annotation_table$sample]
counts_table_sum <- lapply(counts_table_sum, sum, 2)
counts_table_sum <- t(as.data.frame(counts_table_sum))
#remove samples that have a count below 200.000
counts_table_sum <- counts_table_sum[counts_table_sum[, 1] >= 200000, ]
counts_table_sum <- as.data.frame(counts_table_sum)
colnames(counts_table_sum) <- c("total_counts")
full_data_2 <- read_csv("READ_sample_info.csv")
#select the columns that we want to keep
full_data_2 = subset(full_data_2, select = c("ID SPSS", "Gender", "Censor recurrence (0=recurrence, 1=no recurrence)"))
full_data_2 = na.omit(full_data)
#changing the column names for easier viewing
colnames(full_data_2) <- c('sample', 'gender', 'response')
#write.table(full_data, file="Annotation_table", quote = F)
#loading in data set
counts_table_2 <- read_table("salmon.merged.gene_counts2.tsv")
#clean up row and column names
counts_table_2 = counts_table_2[,!grepl("^SN_",names(counts_table_2))]
colnames(counts_table_2) <- gsub("LW.", "", colnames(counts_table_2))
#Removing the first two columns of the counts_table set
counts_table_sum_2 <- counts_table_2[,!grepl("^gene",names(counts_table_2))]
#Summing up the counts for each sample and transposing
counts_table_sum_2 <- lapply(counts_table_sum_2, sum, 2)
counts_table_sum_2 <- t(as.data.frame(counts_table_sum_2))
#Barplot for total counts_table_sum:
counts_table_sum_2 <- counts_table_sum_2[counts_table_sum_2[, 1] >= 200000, ]
counts_table_sum_2 <- as.data.frame(counts_table_sum_2)
colnames(counts_table_sum_2) <- c("total_counts")
counts_table_sum = rbind(counts_table_sum, counts_table_sum_2)
View(counts_table_sum)
counts_table = rbind(counts_table, counts_table_2)
counts_table = merge(counts_table, counts_table_2, by = 'row.names', all = TRUE)
View(counts_table)
counts_table <- subset(counts_table, select  = -c ("Row.names", "gene_id", "gene_names"))
counts_table <- select(counts_table, -c ("Row.names", "gene_id", "gene"))
library(dplyr)
counts_table <- select(counts_table, -c ("Row.names", "gene_id", "gene"))
counts_table <- select(counts_table, -c (Row.names, gene_id, gene_name))
counts_table <- subset(counts_table, select =  -c (Row.names, gene_id, gene_name))
View(counts_table)
View(CRC_dataset)
View(full_data_2)
setwd("C:/Users/koenv/OneDrive/Documenten/Universiteit/Bio-informatica Jaar 3/Thesis_project/input_data")
#Loading in files
sample_sheet <- read_excel("sample_sheet.xlsx")
CRC_dataset <- read_excel("CRC_Stage-III_Salzburg-Cohort_Coded_Relapse-Data_fChristina.xlsx")
#Merging two tables together, based on sample_ID/samplegetwd()\
full_data <- merge (sample_sheet, CRC_dataset, by.x = "sample", by.y = "Sample ID")
#Select the columns that we want to keep
full_data =  subset(full_data,
select = c("sample", "Sex\n[1=male; 2=female]", "Relapse within 3 years\n[0=No; 1=Yes]","Tumor Cell Content\n[minimum]","Tumor Cell Content\n[maximum]"))
#Changing the column names for easier viewing
colnames(full_data) <- c('sample','gender', 'response', 'min_tumor_cell_content','max_tumor_cell_content')
#Remove spaces from sample column of the df table.
full_data$sample <- gsub('\\s+', '', full_data$sample)
#Creating a filter that shows us a minimum tumor cell content of either 50% or 25%.
vars <- c("min_tumor_cell_content")
cond <- c(50, 25)
#Using the filter, can select the condition (50%,25%) for which we want to check.
annotation_table <- full_data %>% filter(.data[[vars[[1]]]] >= cond[[1]])
#write.table(annotation_table, file="Annotation_table", quote = F)
full_data = subset(full_data, select = c('sample', 'gender', 'response'))
#loading in gene count data set
counts_table <- read_table("salmon.merged.gene_counts.tsv")
#optimized viewing (removing _ from the gene count data set)
colnames(counts_table) <- gsub("_", "", colnames(counts_table))
#removing samples from gene_count_dataset that don't have the 50% tumor cell count
counts_table <- subset(counts_table, select = c("geneid","genename", annotation_table$sample))
#creating a sum of all the gene counts
counts_table_sum <- counts_table[annotation_table$sample]
counts_table_sum <- lapply(counts_table_sum, sum, 2)
counts_table_sum <- t(as.data.frame(counts_table_sum))
#remove samples that have a count below 200.000
counts_table_sum <- counts_table_sum[counts_table_sum[, 1] >= 200000, ]
counts_table_sum <- as.data.frame(counts_table_sum)
colnames(counts_table_sum) <- c("total_counts")
full_data_2 <- read_csv("READ_sample_info.csv")
#select the columns that we want to keep
full_data_2 = subset(full_data_2, select = c("ID SPSS", "Gender", "Censor recurrence (0=recurrence, 1=no recurrence)"))
full_data_2 = na.omit(full_data)
#changing the column names for easier viewing
colnames(full_data_2) <- c('sample', 'gender', 'response')
#write.table(full_data, file="Annotation_table", quote = F)
#loading in data set
counts_table_2 <- read_table("salmon.merged.gene_counts2.tsv")
#clean up row and column names
counts_table_2 = counts_table_2[,!grepl("^SN_",names(counts_table_2))]
colnames(counts_table_2) <- gsub("LW.", "", colnames(counts_table_2))
#Removing the first two columns of the counts_table set
counts_table_sum_2 <- counts_table_2[,!grepl("^gene",names(counts_table_2))]
#Summing up the counts for each sample and transposing
counts_table_sum_2 <- lapply(counts_table_sum_2, sum, 2)
counts_table_sum_2 <- t(as.data.frame(counts_table_sum_2))
#Barplot for total counts_table_sum:
counts_table_sum_2 <- counts_table_sum_2[counts_table_sum_2[, 1] >= 200000, ]
counts_table_sum_2 <- as.data.frame(counts_table_sum_2)
colnames(counts_table_sum_2) <- c("total_counts")
counts_table_sum <- rbind(counts_table_sum, counts_table_sum_2)
counts_table <- merge(counts_table, counts_table_2, by = 'row.names', all = TRUE)
counts_table <- subset(counts_table, select =  -c (Row.names, gene_id, gene_name))
View(full_data)
setwd("C:/Users/koenv/OneDrive/Documenten/Universiteit/Bio-informatica Jaar 3/Thesis_project/input_data")
#Loading in files
sample_sheet <- read_excel("sample_sheet.xlsx")
CRC_dataset <- read_excel("CRC_Stage-III_Salzburg-Cohort_Coded_Relapse-Data_fChristina.xlsx")
#Merging two tables together, based on sample_ID/samplegetwd()\
full_data <- merge (sample_sheet, CRC_dataset, by.x = "sample", by.y = "Sample ID")
#Select the columns that we want to keep
full_data =  subset(full_data,
select = c("sample", "Sex\n[1=male; 2=female]", "Relapse within 3 years\n[0=No; 1=Yes]","Tumor Cell Content\n[minimum]","Tumor Cell Content\n[maximum]"))
#Changing the column names for easier viewing
colnames(full_data) <- c('sample','gender', 'response', 'min_tumor_cell_content','max_tumor_cell_content')
#Remove spaces from sample column of the df table.
full_data$sample <- gsub('\\s+', '', full_data$sample)
#Creating a filter that shows us a minimum tumor cell content of either 50% or 25%.
vars <- c("min_tumor_cell_content")
cond <- c(50, 25)
#Using the filter, can select the condition (50%,25%) for which we want to check.
annotation_table <- full_data %>% filter(.data[[vars[[1]]]] >= cond[[1]])
#write.table(annotation_table, file="Annotation_table", quote = F)
full_data = subset(full_data, select = c('sample', 'gender', 'response'))
#loading in gene count data set
counts_table <- read_table("salmon.merged.gene_counts.tsv")
#optimized viewing (removing _ from the gene count data set)
colnames(counts_table) <- gsub("_", "", colnames(counts_table))
#removing samples from gene_count_dataset that don't have the 50% tumor cell count
counts_table <- subset(counts_table, select = c("geneid","genename", annotation_table$sample))
#creating a sum of all the gene counts
counts_table_sum <- counts_table[annotation_table$sample]
counts_table_sum <- lapply(counts_table_sum, sum, 2)
counts_table_sum <- t(as.data.frame(counts_table_sum))
#remove samples that have a count below 200.000
counts_table_sum <- counts_table_sum[counts_table_sum[, 1] >= 200000, ]
counts_table_sum <- as.data.frame(counts_table_sum)
colnames(counts_table_sum) <- c("total_counts")
full_data_2 <- read_csv("READ_sample_info.csv")
#select the columns that we want to keep
full_data_2 = subset(full_data_2, select = c("ID SPSS", "Gender", "Censor recurrence (0=recurrence, 1=no recurrence)"))
full_data_2 = na.omit(full_data_2)
#changing the column names for easier viewing
colnames(full_data_2) <- c('sample', 'gender', 'response')
#write.table(full_data, file="Annotation_table", quote = F)
#loading in data set
counts_table_2 <- read_table("salmon.merged.gene_counts2.tsv")
#clean up row and column names
counts_table_2 = counts_table_2[,!grepl("^SN_",names(counts_table_2))]
colnames(counts_table_2) <- gsub("LW.", "", colnames(counts_table_2))
#Removing the first two columns of the counts_table set
counts_table_sum_2 <- counts_table_2[,!grepl("^gene",names(counts_table_2))]
#Summing up the counts for each sample and transposing
counts_table_sum_2 <- lapply(counts_table_sum_2, sum, 2)
counts_table_sum_2 <- t(as.data.frame(counts_table_sum_2))
#Barplot for total counts_table_sum:
counts_table_sum_2 <- counts_table_sum_2[counts_table_sum_2[, 1] >= 200000, ]
counts_table_sum_2 <- as.data.frame(counts_table_sum_2)
colnames(counts_table_sum_2) <- c("total_counts")
counts_table_sum <- rbind(counts_table_sum, counts_table_sum_2)
counts_table <- merge(counts_table, counts_table_2, by = 'row.names', all = TRUE)
counts_table <- subset(counts_table, select =  -c (Row.names, gene_id, gene_name))
setwd("C:/Users/koenv/OneDrive/Documenten/Universiteit/Bio-informatica Jaar 3/Thesis_project/input_data")
#Loading in files
sample_sheet <- read_excel("sample_sheet.xlsx")
CRC_dataset <- read_excel("CRC_Stage-III_Salzburg-Cohort_Coded_Relapse-Data_fChristina.xlsx")
#Merging two tables together, based on sample_ID/samplegetwd()\
full_data <- merge (sample_sheet, CRC_dataset, by.x = "sample", by.y = "Sample ID")
#Select the columns that we want to keep
full_data =  subset(full_data,
select = c("sample", "Sex\n[1=male; 2=female]", "Relapse within 3 years\n[0=No; 1=Yes]","Tumor Cell Content\n[minimum]","Tumor Cell Content\n[maximum]"))
#Changing the column names for easier viewing
colnames(full_data) <- c('sample','gender', 'response', 'min_tumor_cell_content','max_tumor_cell_content')
#Remove spaces from sample column of the df table.
full_data$sample <- gsub('\\s+', '', full_data$sample)
#Creating a filter that shows us a minimum tumor cell content of either 50% or 25%.
vars <- c("min_tumor_cell_content")
cond <- c(50, 25)
#Using the filter, can select the condition (50%,25%) for which we want to check.
annotation_table <- full_data %>% filter(.data[[vars[[1]]]] >= cond[[1]])
#write.table(annotation_table, file="Annotation_table", quote = F)
full_data = subset(full_data, select = c('sample', 'gender', 'response'))
#loading in gene count data set
counts_table <- read_table("salmon.merged.gene_counts.tsv")
#optimized viewing (removing _ from the gene count data set)
colnames(counts_table) <- gsub("_", "", colnames(counts_table))
#removing samples from gene_count_dataset that don't have the 50% tumor cell count
counts_table <- subset(counts_table, select = c("geneid","genename", annotation_table$sample))
#creating a sum of all the gene counts
counts_table_sum <- counts_table[annotation_table$sample]
counts_table_sum <- lapply(counts_table_sum, sum, 2)
counts_table_sum <- t(as.data.frame(counts_table_sum))
#remove samples that have a count below 200.000
counts_table_sum <- counts_table_sum[counts_table_sum[, 1] >= 200000, ]
counts_table_sum <- as.data.frame(counts_table_sum)
colnames(counts_table_sum) <- c("total_counts")
#Removing samples <200.000
t_counts_table <- t(counts_table)
t_counts_table <- t_counts_table[rownames(t_counts_table) %in% rownames(counts_table_sum),]
counts_table <- counts_table
counts_table <- as.data.frame(counts_table[,-2])
rownames(counts_table) <- counts_table$geneid
counts_table <- counts_table[,-1]
counts_table <- t(counts_table)
counts_table <- as.data.frame(counts_table[rownames(counts_table) %in% rownames(t_counts_table),])
counts_table <- log(counts_table+1)
full_data_2 <- read_csv("READ_sample_info.csv")
#select the columns that we want to keep
full_data_2 = subset(full_data_2, select = c("ID SPSS", "Gender", "Censor recurrence (0=recurrence, 1=no recurrence)"))
full_data_2 = na.omit(full_data_2)
#changing the column names for easier viewing
colnames(full_data_2) <- c('sample', 'gender', 'response')
#write.table(full_data, file="Annotation_table", quote = F)
#loading in data set
counts_table_2 <- read_table("salmon.merged.gene_counts2.tsv")
#clean up row and column names
counts_table_2 = counts_table_2[,!grepl("^SN_",names(counts_table_2))]
colnames(counts_table_2) <- gsub("LW.", "", colnames(counts_table_2))
#Removing the first two columns of the counts_table set
counts_table_sum_2 <- counts_table_2[,!grepl("^gene",names(counts_table_2))]
#Summing up the counts for each sample and transposing
counts_table_sum_2 <- lapply(counts_table_sum_2, sum, 2)
counts_table_sum_2 <- t(as.data.frame(counts_table_sum_2))
#Barplot for total counts_table_sum:
counts_table_sum_2 <- counts_table_sum_2[counts_table_sum_2[, 1] >= 200000, ]
counts_table_sum_2 <- as.data.frame(counts_table_sum_2)
colnames(counts_table_sum_2) <- c("total_counts")
counts_table_sum <- rbind(counts_table_sum, counts_table_sum_2)
counts_table <- merge(counts_table, counts_table_2, by = 'row.names', all = TRUE)
gc()
counts_table <- merge(counts_table, counts_table_2, by = 'row.names', all = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(RColorBrewer)
library(DEGreport)
library(ggplot2)
library(ggrepel)
library(devtools)
library(ggbiplot)
library(readxl)
library(IHW)
library(pheatmap)
library(EnhancedVolcano)
library(DESeq2)
library(Glimma)
library(tidyr)
library(DOSE)
library(dplyr)
library(clusterProfiler)
library(enrichplot)
library(R.utils)
R.utils::setOption("clusterProfiler.download.method","auto")
#set the desired organism here
organism = "org.Hs.eg.db"
library(organism, character.only = TRUE)
setwd("C:/Users/koenv/OneDrive/Documenten/Universiteit/Bio-informatica Jaar 3/Thesis_project/input_data")
#Loading in files
sample_sheet <- read_excel("sample_sheet.xlsx")
CRC_dataset <- read_excel("CRC_Stage-III_Salzburg-Cohort_Coded_Relapse-Data_fChristina.xlsx")
#Merging two tables together, based on sample_ID/samplegetwd()\
full_data <- merge (sample_sheet, CRC_dataset, by.x = "sample", by.y = "Sample ID")
#Select the columns that we want to keep
full_data =  subset(full_data,
select = c("sample", "Sex\n[1=male; 2=female]", "Relapse within 3 years\n[0=No; 1=Yes]","Tumor Cell Content\n[minimum]","Tumor Cell Content\n[maximum]"))
#Changing the column names for easier viewing
colnames(full_data) <- c('sample','gender', 'response', 'min_tumor_cell_content','max_tumor_cell_content')
#Remove spaces from sample column of the df table.
full_data$sample <- gsub('\\s+', '', full_data$sample)
#Creating a filter that shows us a minimum tumor cell content of either 50% or 25%.
vars <- c("min_tumor_cell_content")
cond <- c(50, 25)
#Using the filter, can select the condition (50%,25%) for which we want to check.
annotation_table <- full_data %>% filter(.data[[vars[[1]]]] >= cond[[1]])
#write.table(annotation_table, file="Annotation_table", quote = F)
full_data = subset(full_data, select = c('sample', 'gender', 'response'))
#loading in gene count data set
counts_table <- read_table("salmon.merged.gene_counts.tsv")
#optimized viewing (removing _ from the gene count data set)
colnames(counts_table) <- gsub("_", "", colnames(counts_table))
#removing samples from gene_count_dataset that don't have the 50% tumor cell count
counts_table <- subset(counts_table, select = c("geneid","genename", annotation_table$sample))
#creating a sum of all the gene counts
counts_table_sum <- counts_table[annotation_table$sample]
counts_table_sum <- lapply(counts_table_sum, sum, 2)
counts_table_sum <- t(as.data.frame(counts_table_sum))
#remove samples that have a count below 200.000
counts_table_sum <- counts_table_sum[counts_table_sum[, 1] >= 200000, ]
counts_table_sum <- as.data.frame(counts_table_sum)
colnames(counts_table_sum) <- c("total_counts")
#Removing samples <200.000
t_counts_table <- t(counts_table)
t_counts_table <- t_counts_table[rownames(t_counts_table) %in% rownames(counts_table_sum),]
counts_table <- counts_table
counts_table <- as.data.frame(counts_table[,-2])
rownames(counts_table) <- counts_table$geneid
counts_table <- counts_table[,-1]
counts_table <- t(counts_table)
counts_table <- as.data.frame(counts_table[rownames(counts_table) %in% rownames(t_counts_table),])
counts_table <- log(counts_table+1)
full_data_2 <- read_csv("READ_sample_info.csv")
#select the columns that we want to keep
full_data_2 = subset(full_data_2, select = c("ID SPSS", "Gender", "Censor recurrence (0=recurrence, 1=no recurrence)"))
full_data_2 = na.omit(full_data_2)
#changing the column names for easier viewing
colnames(full_data_2) <- c('sample', 'gender', 'response')
#write.table(full_data, file="Annotation_table", quote = F)
#loading in data set
counts_table_2 <- read_table("salmon.merged.gene_counts2.tsv")
#clean up row and column names
counts_table_2 = counts_table_2[,!grepl("^SN_",names(counts_table_2))]
colnames(counts_table_2) <- gsub("LW.", "", colnames(counts_table_2))
#Removing the first two columns of the counts_table set
counts_table_sum_2 <- counts_table_2[,!grepl("^gene",names(counts_table_2))]
#Summing up the counts for each sample and transposing
counts_table_sum_2 <- lapply(counts_table_sum_2, sum, 2)
counts_table_sum_2 <- t(as.data.frame(counts_table_sum_2))
#remove samples that have a count below 200.000
counts_table_sum_2 <- counts_table_sum_2[counts_table_sum_2[, 1] >= 200000, ]
counts_table_sum_2 <- as.data.frame(counts_table_sum_2)
colnames(counts_table_sum_2) <- c("total_counts")
counts_table_sum <- rbind(counts_table_sum, counts_table_sum_2)
counts_table <- merge(counts_table, counts_table_2, by = 'row.names', all = TRUE)
View(counts_table_2)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(RColorBrewer)
library(DEGreport)
library(ggplot2)
library(ggrepel)
library(devtools)
library(ggbiplot)
library(readxl)
library(IHW)
library(pheatmap)
library(EnhancedVolcano)
library(DESeq2)
library(Glimma)
library(tidyr)
library(DOSE)
library(dplyr)
library(clusterProfiler)
library(enrichplot)
library(R.utils)
R.utils::setOption("clusterProfiler.download.method","auto")
#set the desired organism here
organism = "org.Hs.eg.db"
library(organism, character.only = TRUE)
setwd("C:/Users/koenv/OneDrive/Documenten/Universiteit/Bio-informatica Jaar 3/Thesis_project/input_data")
#Loading in files
sample_sheet <- read_excel("sample_sheet.xlsx")
CRC_dataset <- read_excel("CRC_Stage-III_Salzburg-Cohort_Coded_Relapse-Data_fChristina.xlsx")
#Merging two tables together, based on sample_ID/samplegetwd()\
full_data <- merge (sample_sheet, CRC_dataset, by.x = "sample", by.y = "Sample ID")
#Select the columns that we want to keep
full_data =  subset(full_data,
select = c("sample", "Sex\n[1=male; 2=female]", "Relapse within 3 years\n[0=No; 1=Yes]","Tumor Cell Content\n[minimum]","Tumor Cell Content\n[maximum]"))
#Changing the column names for easier viewing
colnames(full_data) <- c('sample','gender', 'response', 'min_tumor_cell_content','max_tumor_cell_content')
#Remove spaces from sample column of the df table.
full_data$sample <- gsub('\\s+', '', full_data$sample)
#Creating a filter that shows us a minimum tumor cell content of either 50% or 25%.
vars <- c("min_tumor_cell_content")
cond <- c(50, 25)
#Using the filter, can select the condition (50%,25%) for which we want to check.
annotation_table <- full_data %>% filter(.data[[vars[[1]]]] >= cond[[1]])
#write.table(annotation_table, file="Annotation_table", quote = F)
full_data = subset(full_data, select = c('sample', 'gender', 'response'))
#loading in gene count data set
counts_table <- read_table("salmon.merged.gene_counts.tsv")
#optimized viewing (removing _ from the gene count data set)
colnames(counts_table) <- gsub("_", "", colnames(counts_table))
#removing samples from gene_count_dataset that don't have the 50% tumor cell count
counts_table <- subset(counts_table, select = c("geneid","genename", annotation_table$sample))
#creating a sum of all the gene counts
counts_table_sum <- counts_table[annotation_table$sample]
counts_table_sum <- lapply(counts_table_sum, sum, 2)
counts_table_sum <- t(as.data.frame(counts_table_sum))
#remove samples that have a count below 200.000
counts_table_sum <- counts_table_sum[counts_table_sum[, 1] >= 200000, ]
counts_table_sum <- as.data.frame(counts_table_sum)
colnames(counts_table_sum) <- c("total_counts")
#Removing samples <200.000
t_counts_table <- t(counts_table)
t_counts_table <- t_counts_table[rownames(t_counts_table) %in% rownames(counts_table_sum),]
counts_table <- counts_table
counts_table <- as.data.frame(counts_table[,-2])
rownames(counts_table) <- counts_table$geneid
counts_table <- counts_table[,-1]
counts_table <- t(counts_table)
counts_table <- as.data.frame(counts_table[rownames(counts_table) %in% rownames(t_counts_table),])
counts_table <- log(counts_table+1)
full_data_2 <- read_csv("READ_sample_info.csv")
#select the columns that we want to keep
full_data_2 = subset(full_data_2, select = c("ID SPSS", "Gender", "Censor recurrence (0=recurrence, 1=no recurrence)"))
full_data_2 = na.omit(full_data_2)
#changing the column names for easier viewing
colnames(full_data_2) <- c('sample', 'gender', 'response')
#write.table(full_data, file="Annotation_table", quote = F)
#loading in data set
counts_table_2 <- read_table("salmon.merged.gene_counts2.tsv")
#clean up row and column names
counts_table_2 = counts_table_2[,!grepl("^SN_",names(counts_table_2))]
colnames(counts_table_2) <- gsub("LW.", "", colnames(counts_table_2))
#Removing the first two columns of the counts_table set
counts_table_sum_2 <- counts_table_2[,!grepl("^gene",names(counts_table_2))]
#Summing up the counts for each sample and transposing
counts_table_sum_2 <- lapply(counts_table_sum_2, sum, 2)
counts_table_sum_2 <- t(as.data.frame(counts_table_sum_2))
#remove samples that have a count below 200.000
counts_table_sum_2 <- counts_table_sum_2[counts_table_sum_2[, 1] >= 200000, ]
counts_table_sum_2 <- as.data.frame(counts_table_sum_2)
colnames(counts_table_sum_2) <- c("total_counts")
#Reading in Counts_table (>50% > 200.000)
CRC_counts_table <- counts_table
CRC_counts_table <- data.frame(CRC_counts_table, row.names = 1)
#Reading in Counts_table (>50% > 200.000)
CRC_counts_table_2 <- counts_table_2
CRC_counts_table_2 <- data.frame(CRC_counts_table_2, row.names = 1)
CRC_counts_table_2 <- subset(CRC_counts_table_2, select = -c(gene_name))
colnames(CRC_counts_table_2) <- gsub("X", "", colnames(CRC_counts_table_2))
CRC_annotation_2 <- full_data
CRC_counts_table_2_gene <- counts_table
CRC_annotation_2 <- data.frame(CRC_annotation_2, row.names = CRC_annotation_2$sample)                         #set row_names -> sample names
CRC_annotation_2 <- subset(CRC_annotation_2, select = -(sample))                                            #removal sample column
#Remove genes that have <2 total count in row
CRC_counts_table_2 <- cbind(CRC_counts_table_2, total = rowSums(CRC_counts_table_2))                          #create column with total row_counts
CRC_counts_table_2 <- subset(CRC_counts_table_2, total > 1)                                                 #remove rows(genes) with less than 2 counts
CRC_counts_table_2 <- subset(CRC_counts_table_2, select = -(total))                                         #removal total column
#Ensemble version removal and removal of PAR_Y genes.
CRC_counts_table_2 = CRC_counts_table_2[!grepl("_Y$",rownames(CRC_counts_table_2)),]                          #remove rows that end with the PAR_Y gene_id
CRC_counts_table_2$row_names <- row.names(CRC_counts_table_2)                                               #set row_names to column_names
CRC_counts_table_2$row_names <- gsub('(\\.).*', '', CRC_counts_table_2$row_names)                           #change row_names by removing ensemble ID
CRC_counts_table_2 <- as.data.frame(CRC_counts_table_2, row.names = CRC_counts_table_2$row_names)             #convert back to original state
CRC_counts_table_2 <- subset(CRC_counts_table_2, select = -(row_names))                                     #removal of row_names column
CRC_counts_table_2 <- as.matrix(round(CRC_counts_table_2, 0))                                               #rounding counts to remove decimals
CRC_counts_table_2 <- t(CRC_counts_table_2)
CRC_counts_table_2 <- CRC_counts_table_2[match(rownames((CRC_annotation_2)), rownames((CRC_counts_table_2))),]
CRC_counts_table_2 <- t(CRC_counts_table_2)
counts_table_sum <- rbind(counts_table_sum, counts_table_sum_2)
CRC_counts_table <- merge(CRC_counts_table, CRC_counts_table_2, by = 'row.names', all = TRUE)
#Reading in Counts_table (>50% > 200.000)
CRC_counts_table <- counts_table
CRC_counts_table <- data.frame(CRC_counts_table, row.names = 1)
View(CRC_counts_table)
#Reading in Counts_table (>50% > 200.000)
CRC_counts_table <- counts_table
CRC_counts_table <- CRC_counts_table[!duplicated(colnames(CRC_counts_table))]
CRC_counts_table <- data.frame(CRC_counts_table, row.names = 1)
#Reading in Counts_table (>50% > 200.000)
CRC_counts_table <- counts_table
CRC_counts_table <- CRC_counts_table[!duplicated(rownames(CRC_counts_table))]
CRC_counts_table <- data.frame(CRC_counts_table, row.names = 1)
#Reading in Counts_table (>50% > 200.000)
CRC_counts_table <- counts_table
CRC_counts_table <- CRC_counts_table[!duplicated(colnames(CRC_counts_table))]
#Reading in Counts_table (>50% > 200.000)
CRC_counts_table <- counts_table
duplicates <- duplicated(colnames(CRC_counts_table))
CRC_counts_table[!duplicates]
CRC_counts_table <- data.frame(CRC_counts_table, row.names = 1)
View(CRC_counts_table)
View(counts_table)
#Reading in Counts_table (>50% > 200.000)
CRC_counts_table <- read.table("Counts_table_DeSeq")
CRC_counts_table <- data.frame(CRC_counts_table, row.names = 1)
View(counts_table)
View(CRC_counts_table)
#Reading in Counts_table (>50% > 200.000)
CRC_counts_table <- read.table("Counts_table_DeSeq")
duplicated_names <- duplicated(colnames(CRC_counts_table))
# Remove Duplicate Column Names
CRC_counts_table[!duplicated_names]
CRC_counts_table <- data.frame(CRC_counts_table, row.names = 1)
