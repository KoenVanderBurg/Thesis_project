knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(RColorBrewer)
library(DEGreport)
library(ggplot2)
library(ggrepel)
library(devtools)
library(ggbiplot)
library(readxl)
library(IHW)
library(pheatmap)
library(EnhancedVolcano)
library(DESeq2)
library(Glimma)
#Reading in Counts_table (>50% > 200.000)
CRC_counts_table <- read.table("Counts_table_DeSeq")
CRC_annotation <- read.table("Annotation_table")
CRC_counts_table_gene <- read.table("salmon.merged.gene_counts.tsv") #read_table -> read.table change
#Modifying annotation table
CRC_annotation$gender <-  recode(CRC_annotation$gender,"1" = "Male", "2" = "Female")
CRC_annotation$response <- recode(CRC_annotation$response, "0" = "No_relapse", "1" = "Relapse")
CRC_annotation <- CRC_annotation[CRC_annotation$sample %in% colnames(CRC_counts_table),]                #Removal samples that don't have 200.000 counts
CRC_annotation <- data.frame(CRC_annotation, row.names = CRC_annotation$sample)                         #Set row_names -> sample names
CRC_annotation <- subset(CRC_annotation, select = c(response,gender,min_tumor_cell_content))            #Removal sample column
#Remove genes that have <2 total count in row
CRC_counts_table <- cbind(CRC_counts_table, total = rowSums(CRC_counts_table))                          #Create column with total row_counts
CRC_counts_table <- subset(CRC_counts_table, total > 1)                                                 #Remove rows(genes) with less than 2 counts
CRC_counts_table <- subset(CRC_counts_table, select = -(total))                                         #Removal total column
#Ensemble version removal and removal of PAR_Y genes.
CRC_counts_table = CRC_counts_table[!grepl("_Y$",rownames(CRC_counts_table)),]                          #Remove rows that end with the PAR_Y gene_id
CRC_counts_table$row_names <- row.names(CRC_counts_table)                                               #Set row_names to column_names
CRC_counts_table$row_names <- gsub('(\\.).*', '', CRC_counts_table$row_names)                           #Change row_names by removing ensemble ID
CRC_counts_table <- as.data.frame(CRC_counts_table, row.names = CRC_counts_table$row_names)             #Convert back to original state
CRC_counts_table <- subset(CRC_counts_table, select = -(row_names))                                     #Removal of row_names column
CRC_counts_table <- as.matrix(round(CRC_counts_table, 0))                                               #Rounding counts to remove decimals
#Check if samples both in counts_table and annotation table, and amount of samples is equal.
table(colnames(CRC_counts_table) %in% rownames(CRC_annotation))
table(colnames(CRC_counts_table) == rownames(CRC_annotation))
#Creating DESeq2Dataset object and creating normalized_counts file for later use.
dds <- DESeqDataSetFromMatrix(countData = round(CRC_counts_table), colData = CRC_annotation, design = ~ response)
dds <- estimateSizeFactors(dds)                                                                         #Median of ratios method of normalization
glimmaMDS(dds)                                                                                          #Interactive plotting
normalized_counts <- counts(dds, normalized=TRUE)                                                       #Retrieving normalized counts matrix
#write.table(normalized_counts, file="normalized_counts.txt", sep="\t", quote=F, col.names=NA)          #Creation of normalized_counts file
rld <- rlog(dds, blind=TRUE)                                                                        #Transform (rlog) counts for data visualization (vst faster)
plotPCA(rld, intgroup="response")                                                                   #PCA plot: Response
plotPCA(rld, intgroup="gender")                                                                     #PCA plot: Gender
plotPCA(rld, intgroup= "min_tumor_cell_content")                                                    #PCA plot: Min tumor cell
##Heatmap
rld_mat <- assay(rld)                                                                               #Extract the rlog matrix from the object
rld_cor <- cor(rld_mat)                                                                             #Compute pairwise correlation values
CRC_annotation_heatmap <- subset(CRC_annotation, select = (response))                               #Getting response subset for heat map
pheatmap(rld_cor, annotation_col = CRC_annotation_heatmap, main = "Pairwise correlation values", )  #Plot heat map using the correlation matrix + metadata object
##Making DESeq2 object
dds <- DESeqDataSetFromMatrix(countData = round(CRC_counts_table), colData = CRC_annotation, design = ~ response) #Object creation
dds <- DESeq(dds)                                                                                                 #Run analysis
resIHW <- results(dds, filterFun = ihw)                                                                           #Extracting results using IHW
resIHW_unshrunken <- resIHW                                                                                       #Save copy of non shrunken results
resIHW <- lfcShrink(dds, coef= "response_Relapse_vs_No_relapse" , type = "normal")                                #Applying log fold change shrinkage
#Plot dispersion estimates
plotDispEsts(dds, main = "Dispersion plot")
#MA Plot, colored genes are identified as significantly DE
plotMA(resIHW_unshrunken, ylim=c(-2,2), main = "Unshrunken MA plot")                                              #MA plot using non shrunken fold changes
plotMA(resIHW, ylim=c(-2,2), main = "LFC MA plot")                                                                #MA plot using shrunken fold changes
#Creating a tibble of the results
resIHW_tb <- resIHW %>%
data.frame() %>%
rownames_to_column(var="gene_id")%>%
as_tibble()
#Subset the tibble to keep only significant genes
padj.cutoff <- 0.1                                                                                                #Setting thresholds
log2FoldChange.cutoff.down <- -1
log2FoldChange.cutoff.up <- 1
sigIHW_down <- resIHW_tb %>%                                                                                      #Selection of down_regulated genes
filter(log2FoldChange < log2FoldChange.cutoff.down) %>%
filter(padj < padj.cutoff)
sigIHW_up <- resIHW_tb %>%                                                                                        #Selection of up_regulated genes
filter(log2FoldChange > log2FoldChange.cutoff.up) %>%
filter(padj < padj.cutoff)
sigIHW <- rbind(sigIHW_down,sigIHW_up)                                                                            #Combining all significant genes
rownames(sigIHW) <- sigIHW$gene_id
#Getting significant DE gene list + log2foldchange
CRC_counts_table_gene$gene_id <- gsub('(\\.).*', '', CRC_counts_table_gene$gene_id)                               #Change row_names by removing ensembl ID
#Creating a tibble of the results
resIHW_tb <- resIHW %>%
data.frame() %>%
rownames_to_column(var="gene_id")%>%
as_tibble()
#Subset the tibble to keep only significant genes
padj.cutoff <- 0.1                                                                                                #Setting thresholds
log2FoldChange.cutoff.down <- -1
log2FoldChange.cutoff.up <- 1
sigIHW_down <- resIHW_tb %>%                                                                                      #Selection of down_regulated genes
filter(log2FoldChange < log2FoldChange.cutoff.down) %>%
filter(padj < padj.cutoff)
sigIHW_up <- resIHW_tb %>%                                                                                        #Selection of up_regulated genes
filter(log2FoldChange > log2FoldChange.cutoff.up) %>%
filter(padj < padj.cutoff)
sigIHW <- rbind(sigIHW_down,sigIHW_up)                                                                            #Combining all significant genes
rownames(sigIHW) <- sigIHW$gene_id
#Getting significant DE gene list + log2foldchange
CRC_counts_table_gene$gene_id <- gsub('(\\.).*', '', CRC_counts_table_gene$gene_id)                              #Change row_names by removing ensembl ID
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(RColorBrewer)
library(DEGreport)
library(ggplot2)
library(ggrepel)
library(devtools)
library(ggbiplot)
library(readxl)
library(IHW)
library(pheatmap)
library(EnhancedVolcano)
library(DESeq2)
library(Glimma)
#Reading in Counts_table (>50% > 200.000)
CRC_counts_table <- read.table("Counts_table_DeSeq")
CRC_annotation <- read.table("Annotation_table")
CRC_counts_table_gene <- read.table("salmon.merged.gene_counts.tsv") #read_table -> read.table change
#Modifying annotation table
CRC_annotation$gender <-  recode(CRC_annotation$gender,"1" = "Male", "2" = "Female")
CRC_annotation$response <- recode(CRC_annotation$response, "0" = "No_relapse", "1" = "Relapse")
CRC_annotation <- CRC_annotation[CRC_annotation$sample %in% colnames(CRC_counts_table),]                #Removal samples that don't have 200.000 counts
CRC_annotation <- data.frame(CRC_annotation, row.names = CRC_annotation$sample)                         #Set row_names -> sample names
CRC_annotation <- subset(CRC_annotation, select = c(response,gender,min_tumor_cell_content))            #Removal sample column
#Remove genes that have <2 total count in row
CRC_counts_table <- cbind(CRC_counts_table, total = rowSums(CRC_counts_table))                          #Create column with total row_counts
CRC_counts_table <- subset(CRC_counts_table, total > 1)                                                 #Remove rows(genes) with less than 2 counts
CRC_counts_table <- subset(CRC_counts_table, select = -(total))                                         #Removal total column
#Ensemble version removal and removal of PAR_Y genes.
CRC_counts_table = CRC_counts_table[!grepl("_Y$",rownames(CRC_counts_table)),]                          #Remove rows that end with the PAR_Y gene_id
CRC_counts_table$row_names <- row.names(CRC_counts_table)                                               #Set row_names to column_names
CRC_counts_table$row_names <- gsub('(\\.).*', '', CRC_counts_table$row_names)                           #Change row_names by removing ensemble ID
CRC_counts_table <- as.data.frame(CRC_counts_table, row.names = CRC_counts_table$row_names)             #Convert back to original state
CRC_counts_table <- subset(CRC_counts_table, select = -(row_names))                                     #Removal of row_names column
CRC_counts_table <- as.matrix(round(CRC_counts_table, 0))                                               #Rounding counts to remove decimals
#Check if samples both in counts_table and annotation table, and amount of samples is equal.
table(colnames(CRC_counts_table) %in% rownames(CRC_annotation))
table(colnames(CRC_counts_table) == rownames(CRC_annotation))
#Creating DESeq2Dataset object and creating normalized_counts file for later use.
dds <- DESeqDataSetFromMatrix(countData = round(CRC_counts_table), colData = CRC_annotation, design = ~ response)
dds <- estimateSizeFactors(dds)                                                                         #Median of ratios method of normalization
glimmaMDS(dds)                                                                                          #Interactive plotting
normalized_counts <- counts(dds, normalized=TRUE)                                                       #Retrieving normalized counts matrix
#write.table(normalized_counts, file="normalized_counts.txt", sep="\t", quote=F, col.names=NA)          #Creation of normalized_counts file
rld <- rlog(dds, blind=TRUE)                                                                        #Transform (rlog) counts for data visualization (vst faster)
